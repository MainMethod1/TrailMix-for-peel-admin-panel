<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="e9b5e665-5bcd-446e-b481-ff09cb441509" name="Parth@D4RK 2014-04-13 20:03:13" runUser="D4RK\Parth" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="Default Test Settings" id="a61c39a4-9875-4a88-926e-0a2b0a0e0fda">
    <Deployment runDeploymentRoot="Parth_D4RK 2014-04-13 20_03_13">
      <DeploymentItem filename="C:\Users\Parth\Documents\Visual Studio 2013\Projects\Lab7\Lab7\bin\Lab7.dll" />
    </Deployment>
    <Execution>
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
    <Properties />
  </TestSettings>
  <Times creation="2014-04-13T20:03:13.6698533-04:00" queuing="2014-04-13T20:03:13.9030758-04:00" start="2014-04-13T20:03:13.9811507-04:00" finish="2014-04-13T20:03:24.8819464-04:00" />
  <ResultSummary outcome="Failed">
    <Counters total="1" executed="1" error="0" failed="1" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" passed="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <WebTest name="WebTest1" storage="c:\users\parth\documents\visual studio 2013\projects\lab7\trailmixadmintest\webtest1.webtest" id="9e2331ba-7d51-42ee-ab09-a187c8f4d2eb" persistedWebTest="">
      <Execution id="0e2364ee-86ca-4f52-b1e7-49227f61c570" />
    </WebTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry isTransparent="false" testId="9e2331ba-7d51-42ee-ab09-a187c8f4d2eb" executionId="0e2364ee-86ca-4f52-b1e7-49227f61c570" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <WebTestResult executionId="0e2364ee-86ca-4f52-b1e7-49227f61c570" testId="9e2331ba-7d51-42ee-ab09-a187c8f4d2eb" testName="WebTest1" computerName="D4RK" duration="00:00:00.2360248" startTime="2014-04-13T20:03:14.0442112-04:00" endTime="2014-04-13T20:03:24.8537416-04:00" testType="4e7599fa-5ecb-43e9-a887-cd63cf72d207" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e2364ee-86ca-4f52-b1e7-49227f61c570">
      <Output>
        <ErrorInfo>
          <Message>4 primary requests, 0 dependant requests and 0 conditional rules failed</Message>
        </ErrorInfo>
      </Output>
      <ResultFiles>
        <ResultFile path="WebTest1.webtestResult" />
      </ResultFiles>
      <TestSettings name="Default Test Settings" id="a61c39a4-9875-4a88-926e-0a2b0a0e0fda">
        <Deployment runDeploymentRoot="Parth_D4RK 2014-04-13 20_03_13">
          <DeploymentItem filename="C:\Users\Parth\Documents\Visual Studio 2013\Projects\Lab7\Lab7\bin\Lab7.dll" />
        </Deployment>
        <Execution>
          <TestTypeSpecific>
            <WebTestRunConfiguration testTypeId="4e7599fa-5ecb-43e9-a887-cd63cf72d207">
              <Browser name="Internet Explorer 9.0" MaxConnections="6">
                <Headers>
                  <Header name="User-Agent" value="Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)" />
                  <Header name="Accept" value="*/*" />
                  <Header name="Accept-Language" value="{{$IEAcceptLanguage}}" />
                  <Header name="Accept-Encoding" value="GZIP" />
                </Headers>
              </Browser>
            </WebTestRunConfiguration>
          </TestTypeSpecific>
          <AgentRule name="Execution Agents">
          </AgentRule>
        </Execution>
        <Properties />
      </TestSettings>
      <WebTestResultFilePath>Parth_D4RK 2014-04-13 20_03_13\In\0e2364ee-86ca-4f52-b1e7-49227f61c570\WebTest1.webtestResult</WebTestResultFilePath>
    </WebTestResult>
  </Results>
</TestRun>